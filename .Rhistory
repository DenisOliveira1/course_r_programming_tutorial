while(a > 0){
print(a)
a = a -1
}
for(i in 10){
print(i)
}
a = 10
while(a > 0){
print(a)
a = a -1
}
for(i in 10:20){
print(i)
}
a = 10
while(a > 0){
print(a)
a = a -1
}
for(i in 0:10){
print(i)
}
# while
a = 10
while(a > 0){
print(a)
a = a -1
}
# for
for(i in 0:10){
print(i)
}
# função
soma = function(a, b) {
return(a + b)
}
print(soma(5,6))
# while
a = 10
while(a > 0){
print(a)
a = a -1
}
# for
for(i in 0:10){
print(i)
}
# função
soma = function(a, b) {
return(a + b)
}
print(soma(5,6))
x = T
if(x){
print("true")
}
else{
print("false")
}
x = T
if(x){
print("true")
} else{
print("false")
}
# while
a = 10
while(a > 0){
print(a)
a = a -1
}
# for
for(i in 0:10){
print(i)
}
# função
soma = function(a, b) {
return(a + b)
}
print(soma(5,6))
x = T
if(x){
print("true")
} else{ # else tem que ficar na linha da chave de fechamento do if
print("false")
}
ifelse(x, print("true2"), print("false2") )
ifelse(x,"true2", "false2" )
# while
a = 10
while(a > 0){
print(a)
a = a -1
}
# for
for(i in 0:10){
print(i)
}
# função
soma = function(a, b) {
return(a + b)
}
print(soma(5,6))
# comparação
x = T
if(x){
print("true")
} else{ # else tem que ficar na linha da chave de fechamento do if
print("false")
}
ifelse(x,"true2", "false2")
repeat{
print("oi")
}
# while
a = 10
while(a > 0){
print(a)
a = a -1
}
# for
for(i in 0:10){
print(i)
}
# função
soma = function(a, b) {
return(a + b)
}
print(soma(5,6))
# comparação
x = T
if(x){
print("true")
} else{ # else tem que ficar na linha da chave de fechamento do if
print("false")
}
ifelse(x,"true2", "false2")
cont = 0
repeat{
cont++
print(cont)
}
# while
a = 10
while(a > 0){
print(a)
a = a -1
}
# for
for(i in 0:10){
print(i)
}
# função
soma = function(a, b) {
return(a + b)
}
print(soma(5,6))
# comparação
x = T
if(x){
print("true")
} else{ # else tem que ficar na linha da chave de fechamento do if
print("false")
}
ifelse(x,"true2", "false2")
cont = 0
repeat{
cont = cont + 1
print(cont)
}
# while
a = 10
while(a > 0){
print(a)
a = a -1
}
# for
for(i in 0:10){
print(i)
}
# função
soma = function(a, b) {
return(a + b)
}
print(soma(5,6))
# comparação
x = T
if(x){
print("true")
} else{ # else tem que ficar na linha da chave de fechamento do if
print("false")
}
ifelse(x,"true2", "false2")
cont = 0
repeat{
cont = cont + 1
print(cont)
if(cont == 20){
break
}
}
a = c(1,2,3,4,5)
b = c("a","b")
c = c("a",1)# o número vira string se tiver stirng no vetor
d = c("a",c(1))# os vetores são unidos
a*2
a^2
sqrt(a)
# adicionando item no vetor
a = c(a,6)
a = c(0,a)
a = append(a,-1,0) # adiciona o segundo parametro no index do primeiro parametro
a[20] = 20 # prenche os indexes não usados como NA e esse item
# removendo items do vetor
a = a[-(3:15)]
# em R vetores começam no index 1, não no 0
a[1]# primeiro valor do array
a[-1]# array sem o primeiro valor
a[2:4]# do index 2 ao 4 (3 numeros)
b = c(1,2)
names(b) = c("carros", "casas")
b
a = c(1,2,3,4,5)
b = c("a","b")
c = c("a",1)# o número vira string se tiver stirng no vetor
d = c("a",c(1))# os vetores são unidos
a*2
a^2
sqrt(a)
# adicionando item no vetor
a = c(a,6)
a = c(0,a)
a = append(a,-1,0) # adiciona o segundo parametro no index do primeiro parametro
a[20] = 20 # prenche os indexes não usados como NA e esse item
# removendo items do vetor
a = a[-(3:15)]
# em R vetores começam no index 1, não no 0
a[1]# primeiro valor do array
a[-1]# array sem o primeiro valor
a[2:4]# do index 2 ao 4 (3 numeros)
# nomeando vetores ou listas
b = c(1,2)
names(b) = c("carros", "casas")
c = c("brinquedos" = 3,"roupas" = 4)
c
a = c(1,2,3,4,5)
b = c("a","b")
c = c("a",1)# o número vira string se tiver stirng no vetor
d = c("a",c(1))# os vetores são unidos
a*2
a^2
sqrt(a)
# adicionando item no vetor
a = c(a,6)
a = c(0,a)
a = append(a,-1,0) # adiciona o segundo parametro no index do primeiro parametro
a[20] = 20 # prenche os indexes não usados como NA e esse item
# removendo items do vetor
a = a[-(3:15)]
# em R vetores começam no index 1, não no 0
a[1]# primeiro valor do array
a[-1]# array sem o primeiro valor
a[2:4]# do index 2 ao 4 (3 numeros)
# nomeando vetores ou listas
b = c(1,2)
names(b) = c("carros", "casas")
c = c("brinquedos" = 3,roupas = 4)
c
a = c(1,2,3,4,5)
b = c("a","b")
c = c("a",1)# o número vira string se tiver stirng no vetor
d = c("a",c(1))# os vetores são unidos
a*2
a^2
sqrt(a)
# adicionando item no vetor
a = c(a,6)
a = c(0,a)
a = append(a,-1,0) # adiciona o segundo parametro no index do primeiro parametro
a[20] = 20 # prenche os indexes não usados como NA e esse item
# removendo items do vetor
a = a[-(3:15)]
# em R vetores começam no index 1, não no 0
a[1]# primeiro valor do array
a[-1]# array sem o primeiro valor
a[2:4]# do index 2 ao 4 (3 numeros)
# nomeando vetores ou listas
b = c(1,2)
names(b) = c("carros", casas)
c = c("brinquedos" = 3,roupas = 4)
# nomeando vetores ou listas
b = list(1,2)
names(b) = c("carros", "casas")
# quando o nome é dado na criação do vetor as aspas são opcionais
c = list("brinquedos" = 3, roupas = 4)
View(b)
# nomeando vetores ou listas
b = list(1,2)
names(b) = c("carros", "casas")
# quando o nome é dado na criação do vetor as aspas são opcionais
c = list("brinquedos" = 3, roupas = 4)
b
c
# nomeando vetores ou listas
a = list("a",1)
names(a) = c("item1", "item2")
b = list(1,2)
names(b) = c("carros", "casas")
# quando o nome é dado na criação do vetor as aspas são opcionais
c = list("brinquedos" = 3, roupas = 4)
a
id <- 1:15
age = c(22, 60, 45, 38, 36, 48, 44, 38, 40, 38, 32, 37, 44, 39, 41)
name = c("mathew", "Rick", "ZacK", "Ravi", "Liana",
"Keith","Armen", "ANson", "Bryan", "MD",
"Vish", "Pons", "Neil", "Chris", "Som")
tabela = data.frame(id, age, name)
# enquanto vetores suportam somente um tipo de variavel simples as
# listas supotam varios tipos e inclusive vetores
list = list("a", 1, c(1:5), "atum", tabela)
class(list[1]) # list
names(list) = c("letter","number","vector","word","table")
# IMPORTANTE (igual vetor)
class(list$letter) #character
class(list["letter"]) #list
class(list[1]) # list
class(list[["letter"]]) #character
c = 1:5
sum(c)
c = 1:5
sum(c)
mean(c)
c = 1:5
sum(c)
mean(c)
median(c)
moda(c)
mode(c)
unicos = unique(c)
unicos
d = c(1,2,3,4,5,6,6,7)
unicos = unique(d)
unicos
a = c(1,2,3,4,5)
a
a(1)
a(1,2)
remain(c(1,2))
a(c(1,2))
a[c(1,2)]
a[c(2,1)]
a[c(2,1,3)]
e = list("a","b")
# pega alguns dos itens do vetor em uma ordem especifica
e[c(2,1)]
e = c("a","b","c","d")
e[c(2,1)]
e[c(F,F,T,T)
e[c(F,F,T,T)]
e[c(F,F,T,T)]
# usando um vetor logico
e[c(F,F,T,T)]
e = list("a","b","c","d")
e[c(2,1)]
# usando um vetor logico
e[c(F,F,T,T)]
e[c(T)]
e[c(T)]
e = list("a","b","c","d")
e[c(2,1)]
# usando um vetor logico
e[c(F,F,T,T)]
e[c(T)]
e = list("a","b","c","d")
e[c(T)]
e[c(T,F)]
e[c(T,F)]
e = c("a","b","c","d")
e[c(3,1)]
# usando um vetor logico
e[c(F,F,T,T)]
# se o vetor logico for menor que o alvo ele se repete (recycling)
# TF vira TFTFTFTFTF...
e[c(T,F)]
b = matrix(101:200, nrow=10) # linhas
c = matrix(101:200, ncol=10) # colunas
b
c
b = matrix(101:200, nrow = 10) # linhas
c = matrix(101:200, ncol = 5) # colunas
c
d = matrix(1:2, nrow = 5, ncol = 3)
d
cbind(1:3,4:6,7:9)
matrix(1:2, nrow = 5, ncol = 3)
d = matrix(1:2, nrow = 5, ncol = 3)
cbind(1:3,4:6,7:9)
rbind(1:3,4:6,7:9)
# assim como o vetor, a matrix aceita somente uma tipagem
a = matrix(1:100,10) # 100 números divididos em 10 linhas
b = matrix(101:200, nrow = 10) # linhas
c = matrix(101:200, ncol = 5) # colunas
nrows(a)
ncol(a)
dim(a)
a+b
a*b
# se a entrada for que amatrix é feito um loop (recycling)
d = matrix(1:2, nrow = 5, ncol = 3)
# define linha por linha
cbind(1:3,4:6,7:9)
# define coluna por coluna
rbind(1:3,4:6,7:9)
# assim como o vetor, a matrix aceita somente uma tipagem
a = matrix(1:100,10) # 100 números divididos em 10 linhas
b = matrix(101:200, nrow = 10) # linhas
c = matrix(101:200, ncol = 5) # colunas
nrows(a)
ncol(a)
dim(a)
a+b
a*b
# se a entrada for que amatrix é feito um loop (recycling)
d = matrix(1:2, nrow = 5, ncol = 3)
# define linha por linha
rbind(1:3,4:6,7:9)
# define coluna por coluna
cbind(1:3,4:6,7:9)
m3 = cbind(m2, 1:3)
m2 = cbind(1:3,4:6,7:9)
m3 = cbind(m2, 1:3)
m2
m3
m3 = cbind(m2, c(7,7,7))
m3
d = matrix(10,20, step = 2 , ncol = 2 , nrow = 3)
d = matrix(10:20 , step = 2 , ncol = 2 , nrow = 3)
d = matrix(1:10, 2 , ncol = 2 , nrow = 3)
d
d = matrix(1:6, ncol = 2 , nrow = 3)
d = matrix(1:6, ncol = 2 , nrow = 3)
row.names(d) = c("l1","l2","l3")
col.names(d) = c("c1","c2")
d
rownames(d) = c("l1","l2","l3")
colnames(d) = c("c1","c2")
d
m2 = matrix(1:9, bycol = TRUE, ncol = 3)
m2 = matrix(1:9, byrow = FALSE, ncol = 3)
m2
m2 = cbind(1:3,4:6,7:9)
m2 = cbind(1:3,4:6,7:9)
m2
d = matrix(1:6, ncol = 2 , nrow = 3)
d
d = matrix(1:6, ncol = 2 , nrow = 3)
rownames(d) = c("l1","l2","l3")
colnames(d) = c("c1","c2","c3")
# nome nas linhas e colunas da matrix
d = matrix(1:9, ncol = 3 , nrow = 3)
rownames(d) = c("l1","l2","l3")
colnames(d) = c("c1","c2","c3")
d
d[1:2, -2]
d[,c(1,3)]
d[c(1,3),] # linhas 1 e 3, todas as colunas
# pega o 4 elemento, buscando por colunas
d[4]
d["l1","c1"]
d["l1","c2"]
d["l1","c3"]
d["l1"]
d["l1",]
d[c(T,F)]
d
id <- 1:15
age = c(22, 60, 45, 38, 36, 48, 44, 38, 40, 38, 32, 37, 44, 39, 41)
name = c("mathew", "Rick", "ZacK", "Ravi", "Liana",
"Keith","Armen", "ANson", "Bryan", "MD",
"Vish", "Pons", "Neil", "Chris", "Som")
tabela = data.frame(id, age, name)
tabela
str(tabela)
class(list[[1]]) # list
View(tabela)
delete(tabela)
remove(tabela)
m1 = rbind(1:3,4:6,7:9)
# define coluna por coluna
m2 = cbind(1:3,4:6,7:9)
m1 %*% m2
m1
m2
ls()
list.objects()
print.objects()
attr(y,"a")
y = 1
attr(y,"a")
y
y = 1
attr(y,"a")
y = 1:5
attr(y,"a")
a = list(1,2,list(10,20,30),4,5)
vector(a, length = 7)
a
a = list(1,2,list(10,20,30),4,5)
vector(a)
a = matrix("a",1)
View(a)
